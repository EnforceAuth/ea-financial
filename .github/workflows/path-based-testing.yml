name: Path-based Testing

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

concurrency:
  group: path-testing-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.22'

jobs:
  # Detect which paths have changed
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      app: ${{ steps.changes.outputs.app }}
      infra: ${{ steps.changes.outputs.infra }}
      opa: ${{ steps.changes.outputs.opa }}
      k8s: ${{ steps.changes.outputs.k8s }}
      docs: ${{ steps.changes.outputs.docs }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'projects/consumer-accounts-internal-api/**'
            app:
              - 'projects/consumer-accounts-internal-app/**'
            infra:
              - 'infra/**'
            opa:
              - 'infra/opa/**'
            k8s:
              - 'infra/k8s/**'
            docs:
              - '**/*.md'
              - 'docs/**'
            root:
              - 'package.json'
              - 'bun.lock'
              - 'tsconfig.json'
              - '.github/**'

  # API-specific tests
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true' || needs.detect-changes.outputs.root == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ea_financial_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check API
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run tsc --noEmit

      - name: Run API unit tests
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ea_financial_test
          REDIS_URL: redis://localhost:6379

      - name: Run API integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run test:offline
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ea_financial_test
          REDIS_URL: redis://localhost:6379

      - name: Build API
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run build

      - name: Upload API coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./projects/consumer-accounts-internal-api/coverage/lcov.info
          flags: api
          name: api-coverage

  # App-specific tests
  test-app:
    name: Test App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.app == 'true' || needs.detect-changes.outputs.root == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check App
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run type-check

      - name: Lint App
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run lint

      - name: Build App
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run build

      - name: Test App build artifacts
        working-directory: ./projects/consumer-accounts-internal-app
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed - index.html not found"
            exit 1
          fi
          echo "App build artifacts validated successfully"

  # Infrastructure tests
  test-infrastructure:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infra == 'true' || needs.detect-changes.outputs.k8s == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Validate Kubernetes manifests
        run: |
          cd infra/k8s
          find . -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl apply --dry-run=client --validate=true -f {}

      - name: Lint Helm charts
        run: |
          cd infra/k8s
          if [ -d "helm-chart" ]; then
            helm lint helm-chart/
          fi

      - name: Test Docker Compose
        run: |
          cd infra
          if [ -f "docker-compose.dev.yml" ]; then
            docker-compose -f docker-compose.dev.yml config
          fi

  # OPA policy tests
  test-opa-policies:
    name: Test OPA Policies
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.opa == 'true' || needs.detect-changes.outputs.api == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install OPA CLI
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate OPA policies
        run: |
          cd infra/opa
          opa fmt --diff policies/
          opa test policies/

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Start OPA server with policies
        run: |
          cd infra/opa
          opa run --server --addr localhost:8181 policies/ &
          sleep 5

      - name: Run API server in background
        working-directory: ./projects/consumer-accounts-internal-api
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test
          OPA_URL: http://localhost:8181

      - name: Run OPA integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run test:opa

  # Container builds for changed components
  build-containers:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.api == 'true' ||
      needs.detect-changes.outputs.app == 'true' ||
      needs.detect-changes.outputs.root == 'true'
    strategy:
      matrix:
        include:
          - component: api
            condition: ${{ needs.detect-changes.outputs.api == 'true' || needs.detect-changes.outputs.root == 'true' }}
            context: ./projects/consumer-accounts-internal-api
            dockerfile: ./projects/consumer-accounts-internal-api/Dockerfile
          - component: app
            condition: ${{ needs.detect-changes.outputs.app == 'true' || needs.detect-changes.outputs.root == 'true' }}
            context: ./projects/consumer-accounts-internal-app
            dockerfile: ./projects/consumer-accounts-internal-app/Dockerfile
    steps:
      - name: Checkout code
        if: matrix.condition
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: matrix.condition
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        if: matrix.condition
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          tags: ea-financial/${{ matrix.component }}:test-${{ github.sha }}
          push: false
          cache-from: type=gha,scope=${{ matrix.component }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}

      - name: Test container startup
        if: matrix.condition
        run: |
          # Test that the container can start successfully
          docker run --rm -d --name test-${{ matrix.component }} \
            ea-financial/${{ matrix.component }}:test-${{ github.sha }} &
          sleep 10

          # Check if container is still running (didn't crash)
          if docker ps | grep -q test-${{ matrix.component }}; then
            echo "${{ matrix.component }} container started successfully"
            docker stop test-${{ matrix.component }}
          else
            echo "${{ matrix.component }} container failed to start"
            docker logs test-${{ matrix.component }} || true
            exit 1
          fi

  # Documentation checks
  check-documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install markdown linter
        run: bun install -g markdownlint-cli

      - name: Lint markdown files
        run: markdownlint **/*.md --ignore node_modules

      - name: Check for broken links
        run: |
          bun install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" | xargs -I {} markdown-link-check {}

      - name: Validate README structure
        run: |
          if [ ! -f "README.md" ]; then
            echo "Missing root README.md"
            exit 1
          fi

          if [ ! -f "projects/consumer-accounts-internal-api/README.md" ]; then
            echo "Missing API README.md"
            exit 1
          fi

          if [ ! -f "projects/consumer-accounts-internal-app/README.md" ]; then
            echo "Missing App README.md"
            exit 1
          fi

  # Security scan for changed components
  security-scan-changes:
    name: Security Scan Changes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.api == 'true' ||
      needs.detect-changes.outputs.app == 'true' ||
      needs.detect-changes.outputs.root == 'true'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for sensitive files
        run: |
          echo "Checking for accidentally committed sensitive files..."
          if find . -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name "*.jks" | grep -v node_modules; then
            echo "❌ Potential sensitive files found!"
            exit 1
          fi
          echo "✅ No sensitive files detected"

  # Performance impact analysis
  performance-impact:
    name: Performance Impact Analysis
    runs-on: ubuntu-latest
    needs: [detect-changes, test-api]
    if: needs.detect-changes.outputs.api == 'true' && needs.test-api.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Start API server
        working-directory: ./projects/consumer-accounts-internal-api
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test

      - name: Install Artillery
        run: bun install -g artillery@latest

      - name: Run lightweight performance test
        run: |
          cat > quick-perf-test.yml << 'EOF'
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 30
                arrivalRate: 5
          scenarios:
            - name: "Quick health check"
              flow:
                - get:
                    url: "/health"
          EOF

          artillery run quick-perf-test.yml --output perf-results.json

      - name: Analyze performance results
        run: |
          artillery report perf-results.json --output perf-report.html

          # Extract key metrics and comment on PR if significant changes
          echo "Performance test completed. Check artifacts for detailed report."

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-impact-${{ github.sha }}
          path: perf-report.html

  # Summary job
  path-based-testing-summary:
    name: Path-based Testing Summary
    runs-on: ubuntu-latest
    needs: [
      detect-changes,
      test-api,
      test-app,
      test-infrastructure,
      test-opa-policies,
      build-containers,
      check-documentation,
      security-scan-changes,
      performance-impact
    ]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Path-based Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- API: ${{ needs.detect-changes.outputs.api }}" >> $GITHUB_STEP_SUMMARY
          echo "- App: ${{ needs.detect-changes.outputs.app }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure: ${{ needs.detect-changes.outputs.infra }}" >> $GITHUB_STEP_SUMMARY
          echo "- OPA Policies: ${{ needs.detect-changes.outputs.opa }}" >> $GITHUB_STEP_SUMMARY
          echo "- K8s: ${{ needs.detect-changes.outputs.k8s }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.detect-changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "- Root files: ${{ needs.detect-changes.outputs.root }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- API Tests: ${{ needs.test-api.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- App Tests: ${{ needs.test-app.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure Tests: ${{ needs.test-infrastructure.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- OPA Policy Tests: ${{ needs.test-opa-policies.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Builds: ${{ needs.build-containers.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation Checks: ${{ needs.check-documentation.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan-changes.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Impact: ${{ needs.performance-impact.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

      - name: Check critical failures
        run: |
          if [[ "${{ needs.test-api.result }}" == "failure" ||
                "${{ needs.test-app.result }}" == "failure" ||
                "${{ needs.security-scan-changes.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed!"
            exit 1
          else
            echo "✅ All critical path-based tests passed or were skipped appropriately"
          fi
