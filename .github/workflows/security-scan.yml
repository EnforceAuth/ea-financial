name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of security scan"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - dependencies
          - containers
          - secrets
          - compliance
      severity_threshold:
        description: "Minimum severity level"
        required: false
        default: "MEDIUM"
        type: choice
        options:
          - LOW
          - MEDIUM
          - HIGH
          - CRITICAL

concurrency:
  group: security-scan
  cancel-in-progress: false

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event_name == 'schedule' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Run Trivy dependency scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "dependency-scan.sarif"
          severity: ${{ github.event.inputs.severity_threshold || 'MEDIUM' }},HIGH,CRITICAL
          ignore-unfixed: true

      - name: Upload dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "dependency-scan.sarif"
          category: "dependencies"

      - name: Audit npm packages (API)
        working-directory: ./projects/consumer-accounts-internal-api
        run: |
          bun audit --audit-level moderate || echo "Audit completed with warnings"

      - name: Audit npm packages (App)
        working-directory: ./projects/consumer-accounts-internal-app
        run: |
          npm audit --audit-level moderate || echo "Audit completed with warnings"

      - name: License compliance check
        run: |
          bun install -g license-checker
          license-checker --production --json > licenses.json

          # Check for problematic licenses
          if cat licenses.json | jq -r '.[] | select(.licenses | contains("GPL")) | .name' | head -1; then
            echo "❌ GPL licenses found - not suitable for banking applications"
            cat licenses.json | jq -r '.[] | select(.licenses | contains("GPL"))'
            exit 1
          fi

          echo "✅ License compliance check passed"

      - name: Generate dependency report
        run: |
          echo "# Dependency Security Report" > dependency-report.md
          echo "Generated: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## High-Risk Dependencies" >> dependency-report.md

          # Find dependencies with known vulnerabilities
          trivy fs --format json --severity HIGH,CRITICAL . > vuln-report.json || true

          if [ -s vuln-report.json ]; then
            jq -r '.Results[]?.Vulnerabilities[]? | "- \(.PkgName) \(.InstalledVersion): \(.Title)"' vuln-report.json >> dependency-report.md
          else
            echo "No high-risk vulnerabilities found" >> dependency-report.md
          fi

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: |
            dependency-report.md
            licenses.json
            vuln-report.json

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers' || github.event_name == 'schedule' }}
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      matrix:
        component: [api, app]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./projects/consumer-accounts-internal-${{ matrix.component }}
          file: ./projects/consumer-accounts-internal-${{ matrix.component }}/Dockerfile
          tags: security-scan-${{ matrix.component }}:latest
          load: true
          cache-from: type=gha,scope=${{ matrix.component }}

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan-${{ matrix.component }}:latest
          format: "sarif"
          output: "${{ matrix.component }}-container-scan.sarif"
          severity: ${{ github.event.inputs.severity_threshold || 'MEDIUM' }},HIGH,CRITICAL

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "${{ matrix.component }}-container-scan.sarif"
          category: "container-${{ matrix.component }}"

      - name: Run Grype vulnerability scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype security-scan-${{ matrix.component }}:latest -o json > ${{ matrix.component }}-grype-results.json

      - name: Container hardening check
        run: |
          echo "# Container Security Analysis - ${{ matrix.component }}" > ${{ matrix.component }}-security-analysis.md
          echo "Generated: $(date)" >> ${{ matrix.component }}-security-analysis.md
          echo "" >> ${{ matrix.component }}-security-analysis.md

          # Check for non-root user
          if docker run --rm security-scan-${{ matrix.component }}:latest id | grep -q "uid=0"; then
            echo "❌ Container running as root user" >> ${{ matrix.component }}-security-analysis.md
          else
            echo "✅ Container running as non-root user" >> ${{ matrix.component }}-security-analysis.md
          fi

          # Check for minimal base image
          echo "## Base Image Analysis" >> ${{ matrix.component }}-security-analysis.md
          docker history security-scan-${{ matrix.component }}:latest --no-trunc >> ${{ matrix.component }}-security-analysis.md

      - name: Upload container security analysis
        uses: actions/upload-artifact@v4
        with:
          name: container-security-${{ matrix.component }}
          path: |
            ${{ matrix.component }}-grype-results.json
            ${{ matrix.component }}-security-analysis.md

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event_name == 'schedule' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitGuardian secret scan
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --all-policies --show-secrets --exit-zero

      - name: Run TruffleHog secrets scan
        run: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/${{ github.repository }} --json > trufflehog-results.json || true

      - name: Scan for hardcoded credentials patterns
        run: |
          echo "# Secret Scanning Report" > secret-scan-report.md
          echo "Generated: $(date)" >> secret-scan-report.md
          echo "" >> secret-scan-report.md

          # Banking-specific secret patterns
          echo "## Banking-specific Pattern Scan" >> secret-scan-report.md

          # Credit card patterns
          if grep -r -E "[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential credit card numbers found" >> secret-scan-report.md
          else
            echo "✅ No credit card patterns detected" >> secret-scan-report.md
          fi

          # SSN patterns
          if grep -r -E "[0-9]{3}-[0-9]{2}-[0-9]{4}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential SSN patterns found" >> secret-scan-report.md
          else
            echo "✅ No SSN patterns detected" >> secret-scan-report.md
          fi

          # Banking account patterns
          if grep -r -E "account[_-]?number|routing[_-]?number|aba[_-]?number" . --exclude-dir=node_modules --exclude-dir=.git -i; then
            echo "⚠️  Banking account references found - review for hardcoded values" >> secret-scan-report.md
          fi

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            secret-scan-report.md
            trufflehog-results.json

  # Compliance and policy scanning
  compliance-scan:
    name: Compliance & Policy Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'compliance' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OPA CLI
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Banking compliance checks
        run: |
          echo "# Banking Compliance Report" > compliance-report.md
          echo "Generated: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md

          # PCI DSS Compliance checks
          echo "## PCI DSS Compliance" >> compliance-report.md

          # Check for encryption in transit
          if grep -r -i "https\|tls\|ssl" --include="*.ts" --include="*.js" .; then
            echo "✅ HTTPS/TLS usage found" >> compliance-report.md
          else
            echo "❌ No HTTPS/TLS encryption detected" >> compliance-report.md
          fi

          # Check for audit logging
          echo "## Audit Logging Compliance" >> compliance-report.md
          if grep -r -i "audit\|log" --include="*.ts" --include="*.js" .; then
            echo "✅ Audit logging implementation found" >> compliance-report.md
          else
            echo "❌ Limited audit logging detected" >> compliance-report.md
          fi

          # SOX Compliance checks
          echo "## SOX Compliance" >> compliance-report.md

          # Check for change management
          if [ -d ".github/workflows" ]; then
            echo "✅ Automated change management via GitHub Actions" >> compliance-report.md
          else
            echo "❌ No automated change management detected" >> compliance-report.md
          fi

          # Check for separation of duties
          if grep -r -i "review\|approval" .github/ 2>/dev/null; then
            echo "✅ Code review process in place" >> compliance-report.md
          else
            echo "⚠️  Code review requirements not clearly defined" >> compliance-report.md
          fi

      - name: Validate OPA policies for banking compliance
        run: |
          if [ -d "infra/opa" ]; then
            cd infra/opa
            echo "## OPA Policy Validation" >> ../../compliance-report.md

            # Format check
            if opa fmt --diff policies/; then
              echo "✅ OPA policies are properly formatted" >> ../../compliance-report.md
            else
              echo "❌ OPA policy formatting issues found" >> ../../compliance-report.md
            fi

            # Test policies
            if opa test policies/; then
              echo "✅ OPA policy tests pass" >> ../../compliance-report.md
            else
              echo "❌ OPA policy test failures" >> ../../compliance-report.md
            fi
          else
            echo "⚠️  No OPA policies found" >> compliance-report.md
          fi

      - name: Data privacy compliance check
        run: |
          echo "## Data Privacy Compliance (GDPR/CCPA)" >> compliance-report.md

          # Check for PII handling
          if grep -r -i "pii\|personal.*data\|gdpr\|ccpa" --include="*.ts" --include="*.js" --include="*.md" .; then
            echo "✅ Data privacy considerations documented" >> compliance-report.md
          else
            echo "❌ Limited data privacy documentation" >> compliance-report.md
          fi

          # Check for data retention policies
          if grep -r -i "retention\|delete\|purge" --include="*.ts" --include="*.js" .; then
            echo "✅ Data retention mechanisms found" >> compliance-report.md
          else
            echo "❌ No data retention policies detected" >> compliance-report.md
          fi

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md

  # Infrastructure security assessment
  infrastructure-security:
    name: Infrastructure Security Assessment
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          # Install checkov for infrastructure security
          pip install checkov

          # Install kube-score for Kubernetes security
          curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64 -o kube-score
          chmod +x kube-score
          sudo mv kube-score /usr/local/bin/

      - name: Scan Kubernetes manifests
        run: |
          echo "# Infrastructure Security Report" > infra-security-report.md
          echo "Generated: $(date)" >> infra-security-report.md
          echo "" >> infra-security-report.md

          if [ -d "infra/k8s" ]; then
            echo "## Kubernetes Security Analysis" >> infra-security-report.md

            # Run kube-score on all YAML files
            find infra/k8s -name "*.yaml" -o -name "*.yml" | while read file; do
              echo "### Analysis of $file" >> infra-security-report.md
              kube-score score "$file" >> infra-security-report.md 2>&1 || true
              echo "" >> infra-security-report.md
            done
          fi

      - name: Scan infrastructure as code with Checkov
        run: |
          echo "## Infrastructure as Code Security" >> infra-security-report.md
          checkov -d infra/ --framework kubernetes docker-compose --output cli >> infra-security-report.md || true

      - name: Docker security best practices check
        run: |
          echo "## Docker Security Best Practices" >> infra-security-report.md

          find . -name "Dockerfile*" | while read dockerfile; do
            echo "### Analysis of $dockerfile" >> infra-security-report.md

            # Check for non-root user
            if grep -q "USER" "$dockerfile"; then
              echo "✅ Non-root user specified" >> infra-security-report.md
            else
              echo "❌ No USER directive found - container may run as root" >> infra-security-report.md
            fi

            # Check for health checks
            if grep -q "HEALTHCHECK" "$dockerfile"; then
              echo "✅ Health check configured" >> infra-security-report.md
            else
              echo "⚠️  No health check configured" >> infra-security-report.md
            fi

            # Check for minimal base image
            if grep -E "alpine|scratch|distroless" "$dockerfile"; then
              echo "✅ Minimal base image used" >> infra-security-report.md
            else
              echo "⚠️  Consider using minimal base image" >> infra-security-report.md
            fi

            echo "" >> infra-security-report.md
          done

      - name: Upload infrastructure security report
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security-report
          path: infra-security-report.md

  # Security report consolidation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        container-scan,
        secret-scan,
        compliance-scan,
        infrastructure-security,
      ]
    if: always()
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Consolidate security report
        run: |
          echo "# EA Financial - Security Scan Report" > consolidated-security-report.md
          echo "**Generated:** $(date)" >> consolidated-security-report.md
          echo "**Scan Type:** ${{ github.event.inputs.scan_type || 'scheduled' }}" >> consolidated-security-report.md
          echo "**Severity Threshold:** ${{ github.event.inputs.severity_threshold || 'MEDIUM' }}" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md

          # Summary section
          echo "## Executive Summary" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md
          echo "| Scan Type | Status | Critical | High | Medium |" >> consolidated-security-report.md
          echo "|-----------|--------|----------|------|---------|" >> consolidated-security-report.md
          echo "| Dependencies | ${{ needs.dependency-scan.result || 'skipped' }} | - | - | - |" >> consolidated-security-report.md
          echo "| Containers | ${{ needs.container-scan.result || 'skipped' }} | - | - | - |" >> consolidated-security-report.md
          echo "| Secrets | ${{ needs.secret-scan.result || 'skipped' }} | - | - | - |" >> consolidated-security-report.md
          echo "| Compliance | ${{ needs.compliance-scan.result || 'skipped' }} | - | - | - |" >> consolidated-security-report.md
          echo "| Infrastructure | ${{ needs.infrastructure-security.result || 'skipped' }} | - | - | - |" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md

          # Combine individual reports
          if [ -d "security-reports" ]; then
            find security-reports -name "*.md" -exec cat {} \; >> consolidated-security-report.md
          fi

          echo "## Recommendations" >> consolidated-security-report.md
          echo "" >> consolidated-security-report.md
          echo "1. **Critical vulnerabilities** should be addressed immediately" >> consolidated-security-report.md
          echo "2. **High severity** issues should be resolved within 48 hours" >> consolidated-security-report.md
          echo "3. **Medium severity** issues should be addressed within 1 week" >> consolidated-security-report.md
          echo "4. Review and update security policies quarterly" >> consolidated-security-report.md
          echo "5. Ensure all team members have security training" >> consolidated-security-report.md

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: consolidated-security-report.md

      - name: Create security issue for failures
        if: ${{ needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure' || needs.secret-scan.result == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('consolidated-security-report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Scan Failures Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## Security Scan Alert

              Critical security issues have been detected during the automated security scan.

              **Immediate action required:**
              - Review the detailed security report below
              - Address critical and high severity vulnerabilities
              - Update dependencies with known vulnerabilities

              ---

              ${report}

              **Next Steps:**
              1. Assign this issue to the security team
              2. Create action items for each critical finding
              3. Schedule remediation work
              4. Re-run security scan after fixes
              `,
              labels: ['security', 'critical', 'automated'],
              assignees: ['security-team'] // Replace with actual security team members
            });

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#security-alerts"
          text: |
            🔒 Security Scan Completed

            **Results Summary:**
            • Dependencies: ${{ needs.dependency-scan.result || 'skipped' }}
            • Containers: ${{ needs.container-scan.result || 'skipped' }}
            • Secrets: ${{ needs.secret-scan.result || 'skipped' }}
            • Compliance: ${{ needs.compliance-scan.result || 'skipped' }}
            • Infrastructure: ${{ needs.infrastructure-security.result || 'skipped' }}

            📊 View detailed report in GitHub Actions artifacts
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
