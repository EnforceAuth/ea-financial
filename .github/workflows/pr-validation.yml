name: PR Validation

on:
  pull_request:
    branches: [main, develop, release/*]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Security and Compliance Checks (Critical for Banking)
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "1"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Secrets scanning with GitGuardian
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: License compliance check
        shell: bash
        run: |
          bun install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Run Biome linting and formatting check
        shell: bash
        run: bun run check

      - name: Check markdown formatting
        shell: bash
        run: bun run lint:markdown

      - name: Type check API
        working-directory: ./projects/consumer-accounts-internal-api
        shell: bash
        run: bun run tsc --noEmit

      - name: Type check App
        working-directory: ./projects/consumer-accounts-internal-app
        shell: bash
        run: bun run type-check

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        project: [consumer-accounts-internal-api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Run unit tests with coverage
        working-directory: ./projects/${{ matrix.project }}
        shell: bash
        run: bun run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./projects/${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

      - name: Coverage comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./projects/${{ matrix.project }}/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Setup Test Services
        uses: ./.github/actions/setup-services
        with:
          setup-opa: "true"

      - name: Run API server in background
        working-directory: ./projects/consumer-accounts-internal-api
        shell: bash
        run: |
          bun run start &
          sleep 10

      - name: Run integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        shell: bash
        run: bun run test:offline

      - name: Run OPA integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        shell: bash
        run: bun run test:opa

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Install Playwright
        shell: bash
        run: bunx playwright install --with-deps chromium

      - name: Build frontend application
        working-directory: ./projects/consumer-accounts-internal-app
        shell: bash
        run: bun run build

      - name: Start services with Docker Compose
        shell: bash
        run: |
          cd infra
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30

      - name: Run E2E tests
        shell: bash
        run: |
          bun install -g @playwright/test
          bunx playwright test
        env:
          API_URL: http://localhost:3001
          APP_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # Container Security and Build
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure

      - name: Build and scan API container
        uses: ./.github/actions/build-and-push
        with:
          context: ./projects/consumer-accounts-internal-api
          image-name: ${{ github.repository }}/api
          push: "false"
          version: pr-${{ github.event.pull_request.number }}
          scan-image: "true"

      - name: Build and scan App container
        uses: ./.github/actions/build-and-push
        with:
          context: ./projects/consumer-accounts-internal-app
          image-name: ${{ github.repository }}/app
          push: "false"
          version: pr-${{ github.event.pull_request.number }}
          scan-image: "true"

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Install Artillery
        shell: bash
        run: bun install -g artillery@latest

      - name: Start API server
        working-directory: ./projects/consumer-accounts-internal-api
        shell: bash
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test

      - name: Run performance tests
        shell: bash
        run: |
          cat > performance-test.yml << 'EOF'
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 10
              - duration: 120
                arrivalRate: 20
            processor: "./performance-helpers.js"
          scenarios:
            - name: "Health check load test"
              weight: 30
              flow:
                - get:
                    url: "/health"
            - name: "Authentication load test"
              weight: 70
              flow:
                - post:
                    url: "/auth/login"
                    json:
                      username: "mjohnson"
                      password: "password456"
          EOF

          cat > performance-helpers.js << 'EOF'
          module.exports = {
            // Add custom functions if needed
          };
          EOF

          artillery run performance-test.yml --output performance-report.json

      - name: Generate performance report
        shell: bash
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.html

  # Policy Compliance (Banking Specific)
  policy-compliance:
    name: Policy Compliance
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure

      - name: Validate OPA policies
        shell: bash
        run: |
          cd infra/opa
          opa fmt --diff policies/
          opa test policies/

      - name: Run policy compliance checks
        shell: bash
        run: |
          # Check for banking compliance requirements
          echo "Checking for PCI DSS compliance markers..."
          grep -r "PCI-DSS" . || echo "Warning: No PCI-DSS compliance markers found"

          echo "Checking for audit logging..."
          grep -r "audit" --include="*.ts" --include="*.js" . || echo "Warning: Limited audit logging found"

          echo "Checking for encryption standards..."
          grep -r -E "(encrypt|cipher|hash)" --include="*.ts" --include="*.js" . || echo "Warning: Limited encryption usage found"

  # Final Status Check
  pr-validation-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs:
      [
        security-scan,
        code-quality,
        unit-tests,
        integration-tests,
        e2e-tests,
        container-security,
        performance-tests,
        policy-compliance,
      ]
    if: always()
    steps:
      - name: Check all jobs status
        shell: bash
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" ||
                "${{ needs.code-quality.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.integration-tests.result }}" == "failure" ||
                "${{ needs.container-security.result }}" == "failure" ]]; then
            echo "❌ Critical checks failed. PR cannot be merged."
            exit 1
          elif [[ "${{ needs.e2e-tests.result }}" == "failure" ||
                  "${{ needs.performance-tests.result }}" == "failure" ||
                  "${{ needs.policy-compliance.result }}" == "failure" ]]; then
            echo "⚠️  Some non-critical checks failed. Review required."
            exit 0
          else
            echo "✅ All validation checks passed!"
            exit 0
          fi
