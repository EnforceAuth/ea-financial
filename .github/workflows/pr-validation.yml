name: PR Validation

on:
  pull_request:
    branches: [ main, develop, release/* ]
    types: [ opened, synchronize, reopened, ready_for_review ]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Compliance Checks (Critical for Banking)
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secrets scanning with GitGuardian
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: License compliance check
        run: |
          bun install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check API
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run tsc --noEmit

      - name: Type check App
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run type-check

      - name: Lint API
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run lint

      - name: Lint App
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run lint

      - name: Check code formatting
        run: |
          bun install -g prettier
          prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        project: [consumer-accounts-internal-api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        working-directory: ./projects/${{ matrix.project }}
        run: bun run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./projects/${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

      - name: Coverage comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./projects/${{ matrix.project }}/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ea_financial_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      opa:
        image: openpolicyagent/opa:latest-envoy
        ports:
          - 8181:8181
        options: --entrypoint opa
        env:
          OPA_CONFIG: |
            {
              "services": {
                "authz": {
                  "url": "http://localhost:8181"
                }
              }
            }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Start OPA server with policies
        run: |
          cd infra/opa
          opa run --server --addr localhost:8181 policies/ &
          sleep 5

      - name: Run API server in background
        working-directory: ./projects/consumer-accounts-internal-api
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ea_financial_test
          REDIS_URL: redis://localhost:6379
          OPA_URL: http://localhost:8181

      - name: Run integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run test:offline

      - name: Run OPA integration tests
        working-directory: ./projects/consumer-accounts-internal-api
        run: bun run test:opa

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright
        run: bunx playwright install --with-deps chromium

      - name: Build frontend application
        working-directory: ./projects/consumer-accounts-internal-app
        run: bun run build

      - name: Start services with Docker Compose
        run: |
          cd infra
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          bun install -g @playwright/test
          bunx playwright test
        env:
          API_URL: http://localhost:3001
          APP_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # Container Security and Build
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API container
        uses: docker/build-push-action@v5
        with:
          context: ./projects/consumer-accounts-internal-api
          file: ./projects/consumer-accounts-internal-api/Dockerfile
          tags: ea-financial/api:pr-${{ github.event.pull_request.number }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build App container
        uses: docker/build-push-action@v5
        with:
          context: ./projects/consumer-accounts-internal-app
          file: ./projects/consumer-accounts-internal-app/Dockerfile
          tags: ea-financial/app:pr-${{ github.event.pull_request.number }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ea-financial/api:pr-${{ github.event.pull_request.number }}
          format: 'sarif'
          output: 'api-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on App image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ea-financial/app:pr-${{ github.event.pull_request.number }}
          format: 'sarif'
          output: 'app-trivy-results.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Artillery
        run: bun install -g artillery@latest

      - name: Start API server
        working-directory: ./projects/consumer-accounts-internal-api
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test

      - name: Run performance tests
        run: |
          cat > performance-test.yml << 'EOF'
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 10
              - duration: 120
                arrivalRate: 20
            processor: "./performance-helpers.js"
          scenarios:
            - name: "Health check load test"
              weight: 30
              flow:
                - get:
                    url: "/health"
            - name: "Authentication load test"
              weight: 70
              flow:
                - post:
                    url: "/auth/login"
                    json:
                      username: "mjohnson"
                      password: "password456"
          EOF

          cat > performance-helpers.js << 'EOF'
          module.exports = {
            // Add custom functions if needed
          };
          EOF

          artillery run performance-test.yml --output performance-report.json

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.html

  # Policy Compliance (Banking Specific)
  policy-compliance:
    name: Policy Compliance
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install OPA CLI
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate OPA policies
        run: |
          cd infra/opa
          opa fmt --diff policies/
          opa test policies/

      - name: Run policy compliance checks
        run: |
          # Check for banking compliance requirements
          echo "Checking for PCI DSS compliance markers..."
          grep -r "PCI-DSS" . || echo "Warning: No PCI-DSS compliance markers found"

          echo "Checking for audit logging..."
          grep -r "audit" --include="*.ts" --include="*.js" . || echo "Warning: Limited audit logging found"

          echo "Checking for encryption standards..."
          grep -r -E "(encrypt|cipher|hash)" --include="*.ts" --include="*.js" . || echo "Warning: Limited encryption usage found"

  # Final Status Check
  pr-validation-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      code-quality,
      unit-tests,
      integration-tests,
      e2e-tests,
      container-security,
      performance-tests,
      policy-compliance
    ]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" ||
                "${{ needs.code-quality.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.integration-tests.result }}" == "failure" ||
                "${{ needs.container-security.result }}" == "failure" ]]; then
            echo "❌ Critical checks failed. PR cannot be merged."
            exit 1
          elif [[ "${{ needs.e2e-tests.result }}" == "failure" ||
                  "${{ needs.performance-tests.result }}" == "failure" ||
                  "${{ needs.policy-compliance.result }}" == "failure" ]]; then
            echo "⚠️  Some non-critical checks failed. Review required."
            exit 0
          else
            echo "✅ All validation checks passed!"
            exit 0
          fi
